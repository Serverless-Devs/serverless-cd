edition: 1.0.0
name: serverless-cd
access: default

vars:
  region: ${env.REGION}
  service:
    name: serverless-cd
    description: Serverless-cd 应用
    logConfig: auto
  masterFunctionName: master
  workerFunctionName: worker
  adminFunctionName: admin
  workerDeliverFunctionName: workerDeliver

services:
  master:
    component: fc
    actions:
      pre-deploy:
        - run: npm install --registry=https://registry.npmmirror.com
          path: "./master"
        - run: npx prisma generate
          path: "./master"
    props:
      region: ${vars.region}
      service: ${vars.service}
      function:
        name: ${vars.masterFunctionName}
        description: 用于验证 CD的触发方式、请求的合法性以及组装一些 worker 函数需要的内容
        runtime: nodejs14
        codeUri: ./master
        handler: index.handler
        memorySize: 640
        timeout: 12
        instanceConcurrency: 20
        environmentVariables:
          # 用于链接数据库
          DATABASE_URL: ${env.DATABASE_URL}
          # 阿里云密钥
          ACCOUNT_ID: ${env.ACCOUNT_ID}
          ACCESS_KEY_ID: ${env.ACCESS_KEY_ID}
          ACCESS_KEY_SECRET: ${env.ACCESS_KEY_SECRET}
          # 部署的区域
          REGION: ${vars.region}
          # 部署函数的服务名称
          SERVICE_NAME: ${vars.service.name}
          # worker 函数的名称
          WORKER_FUNCTION_NAME: ${vars.workerFunctionName}
      triggers:
        - name: http-trigger
          type: http
          config:
            authType: anonymous
            methods:
              - POST

  worker:
    component: fc
    actions:
      pre-deploy:
        - run: npm install --registry=https://registry.npmmirror.com
          path: "./worker"
        - run: npx prisma generate
          path: "./worker"
      post-deploy:
        - component: fc api UpdateFunction --region ${vars.region} --header '{"x-fc-disable-container-reuse":"True"}' --path '{"serviceName":"${vars.service.name}","functionName":"${vars.workerFunctionName}"}'
    props:
      region: ${vars.region}
      service: ${vars.service}
      function:
        name: ${vars.workerFunctionName}
        description: 执行用户配置的 CD 流程。
        runtime: custom
        codeUri: ./worker
        customRuntimeConfig:
          command:
            - node
            - server
        memorySize: 2048
        timeout: 3600
        layers:
          - acs:fc:${vars.region}:official:layers/Nodejs16/versions/1
        environmentVariables:
          PATH: /opt/nodejs16/bin:/usr/local/bin/apache-maven/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/ruby/bin
          # 用于给用户显示日志链接地址
          DOMAIN: ${env.DOMAIN}
          # 阿里云密钥
          ACCOUNT_ID: ${env.ACCOUNT_ID}
          ACCESS_KEY_ID: ${env.ACCESS_KEY_ID}
          ACCESS_KEY_SECRET: ${env.ACCESS_KEY_SECRET}
          # 上传的OSS地址
          OSS_BUCKET: ${env.OSS_BUCKET}
          # 部署的区域
          REGION: ${vars.region}
          # 用于链接数据库
          DATABASE_URL: ${env.DATABASE_URL}
        asyncConfiguration:
          maxAsyncRetryAttempts: 0
          statefulInvocation: true
          destination:
            onFailure: acs:fc:::services/${vars.service.name}/functions/${vars.workerDeliverFunctionName}

  worker-deliver:
    component: fc
    actions:
      pre-deploy:
        - run: npm install --registry=https://registry.npmmirror.com
          path: "./worker"
        - run: npx prisma generate
          path: "./worker"
    props:
      region: ${vars.region}
      service: ${vars.service}
      function:
        name: ${vars.workerDeliverFunctionName}
        description: 执行用户配置的 CD 流程。
        runtime: nodejs14
        codeUri: ./worker
        handler: deliver.handler
        memorySize: 640
        timeout: 600
        environmentVariables:
          # 部署的区域
          REGION: ${vars.region}
          # 部署函数的服务名称
          SERVICE_NAME: ${vars.service.name}
          # worker 函数的名称
          WORKER_FUNCTION_NAME: ${vars.workerFunctionName}
          # 用于链接数据库
          DATABASE_URL: ${env.DATABASE_URL}
          # 阿里云密钥
          ACCOUNT_ID: ${env.ACCOUNT_ID}
          ACCESS_KEY_ID: ${env.ACCESS_KEY_ID}
          ACCESS_KEY_SECRET: ${env.ACCESS_KEY_SECRET}
        asyncConfiguration:
          maxAsyncRetryAttempts: 0

  admin: # Admin 控制台提供Api Server函数
    component: fc
    actions:
      pre-deploy:
        - run: npm install --registry=https://registry.npmmirror.com --force
          path: "./admin/public"
        - run: npm run build
          path: "./admin/public"
        - run: npm install --registry=https://registry.npmmirror.com
          path: "./admin"
        - run: npx prisma generate
          path: "./admin"
        - plugin: get-http-function-url # 获取依赖的 trigger 函数的触发器地址，会覆盖 environmentVariables 的 WEBHOOK_URL
          args:
            region: ${vars.region}
            serviceName: ${vars.service.name}
            functionName: ${vars.masterFunctionName}
            envKey: WEBHOOK_URL
    props:
      region: ${vars.region}
      service: ${vars.service}
      function:
        name: ${vars.adminFunctionName}
        description: serverless-cd 前端应用接口
        runtime: custom
        codeUri: ./admin
        handler: index.handler
        memorySize: 640
        timeout: 360
        caPort: 9000
        instanceConcurrency: 5
        customRuntimeConfig:
          command:
            - node
            - index.js
        layers:
          - acs:fc:cn-hongkong:official:layers/Nodejs16/versions/2
        environmentVariables:
          PATH: /opt/nodejs16/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/opt/bin
          # 用于链接数据库
          DATABASE_URL: ${env.DATABASE_URL}
          # 回调地址
          WEBHOOK_URL: ${env.WEBHOOK_URL}
          # 阿里云密钥
          ACCOUNT_ID: ${env.ACCOUNT_ID}
          ACCESS_KEY_ID: ${env.ACCESS_KEY_ID}
          ACCESS_KEY_SECRET: ${env.ACCESS_KEY_SECRET}
          # 部署的区域
          REGION: ${vars.region}
          # 部署函数的服务名称
          SERVICE_NAME: ${vars.service.name}
          # worker 函数的名称
          WORKER_FUNCTION_NAME: ${vars.workerFunctionName}
          # 上传的OSS地址
          OSS_BUCKET: ${env.OSS_BUCKET}
          JWT_SECRET: ${env.JWT_SECRET}
      triggers:
        - name: http-trigger
          type: http
          config:
            authType: anonymous
            methods:
              - HEAD
              - DELETE
              - POST
              - GET
              - OPTIONS
              - PUT
              - PATCH
      customDomains:
        - domainName: ${env.DOMAIN}
          protocol: HTTP
          routeConfigs:
            - path: /*
              serviceName: ${vars.service.name}
              functionName: ${vars.adminFunctionName}
